from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from utils.database import is_registered, save_trip_start, end_trip, get_now
import sqlite3

ORGANIZATIONS = {
    'kuzminsky': "–ö—É–∑—å–º–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lefortovsky': "–õ–µ—Ñ–æ—Ä—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lyublinsky': "–õ—é–±–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'meshchansky': "–ú–µ—â–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'nagatinsky': "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'perovsky': "–ü–µ—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'shcherbinsky': "–©–µ—Ä–±–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'tverskoy': "–¢–≤–µ—Ä—Å–∫–æ–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'cheremushkinsky': "–ß–µ—Ä–µ–º—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'chertanovsky': "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'msk_city': "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'kassatsionny2': "–í—Ç–æ—Ä–æ–π –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏",
    'domodedovo': "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'lyuberetsky': "–õ—é–±–µ—Ä–µ—Ü–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'vidnoye': "–í–∏–¥–Ω–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'justice_peace': "–ú–∏—Ä–æ–≤—ã–µ —Å—É–¥—å–∏ (—É—á–∞—Å—Ç–æ–∫)",
    'fns': "–§–ù–°",
    'gibdd': "–ì–ò–ë–î–î",
    'notary': "–ù–æ—Ç–∞—Ä–∏—É—Å",
    'post': "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
    'rosreestr': "–†–æ—Å—Ä–µ–µ—Å—Ç—Ä",
    'other': "–î—Ä—É–≥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
}

async def start_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_registered(user_id):
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n/register –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
            parse_mode="Markdown"
        )
        return
    keyboard = [[InlineKeyboardButton(name, callback_data=f"org_{org_id}")]
                for org_id, name in ORGANIZATIONS.items()]
    await update.message.reply_text(
        "üöó –ö—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å? –í—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def handle_custom_org_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    custom_org = update.message.text.strip()
    if not custom_org:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    if not is_registered(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    success = save_trip_start(user_id, "other", custom_org)
    t = get_now().strftime("%H:%M")
    if success:
        await update.message.reply_text(f"üöÄ –ü–æ–µ–∑–¥–∫–∞ –≤ {custom_org} –Ω–∞—á–∞—Ç–∞ –≤ {t}")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤ –ø—É—Ç–∏).")

async def end_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    success = end_trip(user_id)
    t = get_now().strftime("%H:%M")
    if success:
        await update.message.reply_text(f"üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {t}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–µ–∑–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–µ—Ç.")
