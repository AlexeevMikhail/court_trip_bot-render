# core/report.py
from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
from utils.database import get_conn
import pandas as pd
from io import BytesIO

ADMIN_IDS = [414634622, 1745732977]  # –≤–∞—à–∏ –∞–¥–º–∏–Ω‚ÄëID

async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞.",
            parse_mode="Markdown"
        )
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã /report [start] [end]
    args = context.args
    start_date = end_date = None
    try:
        if len(args) >= 1:
            start_date = datetime.strptime(args[0], "%d.%m.%Y").date()
        if len(args) >= 2:
            end_date   = datetime.strptime(args[1], "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "üìå –§–æ—Ä–º–∞—Ç: `/report –î–î.MM.–ì–ì–ì–ì [–î–î.MM.–ì–ì–ì–ì]`",
            parse_mode="Markdown"
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ Postgres
    with get_conn() as conn:
        df = pd.read_sql("""
            SELECT
              e.full_name   AS –§–ò–û,
              t.organization_name AS –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è,
              t.start_datetime,
              t.end_datetime
            FROM employees e
            JOIN trips t ON e.user_id = t.user_id
            WHERE e.is_active = TRUE
            ORDER BY t.start_datetime
        """, conn)

    if df.empty:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.", parse_mode="Markdown")
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
    if start_date:
        iso = start_date.isoformat()
        df = df[df['start_datetime'].astype(str).str.startswith(iso)]
    if start_date and end_date and end_date != start_date:
        # –¥–∏–∞–ø–∞–∑–æ–Ω
        days = pd.date_range(start_date, end_date).date
        mask = df['start_datetime'].astype(str).apply(
            lambda s: any(s.startswith(d.isoformat()) for d in days)
        )
        df = df[mask]

    if df.empty:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", parse_mode="Markdown")
        return

    # –í—ã—á–ª–µ–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    df['–î–∞—Ç–∞']          = df['start_datetime'].astype(str).str[0:10].str.replace('-', '.', regex=False)
    df['–ù–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏'] = df['start_datetime'].astype(str).str[11:16]
    df['–ö–æ–Ω–µ—Ü –ø–æ–µ–∑–¥–∫–∏']  = df['end_datetime'].astype(str).str[11:16].fillna('-')

    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á—á:–º–º)
    def calc_duration(row):
        s = row['start_datetime'][:16]
        e = row['end_datetime'][:16] if pd.notnull(row['end_datetime']) else None
        try:
            dt_s = datetime.strptime(s, "%Y-%m-%d %H:%M")
            dt_e = datetime.strptime(e, "%Y-%m-%d %H:%M") if e else None
            if dt_e and dt_e >= dt_s:
                delta = dt_e - dt_s
                h = delta.seconds // 3600
                m = (delta.seconds % 3600) // 60
                return f"{h:02}:{m:02}"
        except:
            pass
        return "-"

    df['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] = df.apply(calc_duration, axis=1)

    final = df[[
        '–§–ò–û', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–î–∞—Ç–∞',
        '–ù–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏', '–ö–æ–Ω–µ—Ü –ø–æ–µ–∑–¥–∫–∏', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    ]]

    # –ü–∏—à–µ–º –≤ Excel —Å –∞–≤—Ç–æ‚Äë—à–∏—Ä–∏–Ω–æ–π
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        final.to_excel(writer, sheet_name='–û—Ç—á—ë—Ç', index=False)
        wb = writer.book
        ws = writer.sheets['–û—Ç—á—ë—Ç']
        for i, col in enumerate(final.columns):
            width = max(final[col].astype(str).map(len).max(), len(col)) + 2
            ws.set_column(i, i, width)
    output.seek(0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if start_date and not end_date:
        fname = f"–æ—Ç—á–µ—Ç –ø–æ –ø–æ–µ–∑–¥–∫–∞–º {start_date.strftime('%d.%m.%Y')}.xlsx"
    elif start_date and end_date:
        fname = f"–æ—Ç—á–µ—Ç –ø–æ –ø–æ–µ–∑–¥–∫–∞–º {start_date.strftime('%d.%m.%Y')}_{end_date.strftime('%d.%m.%Y')}.xlsx"
    else:
        today = datetime.now().strftime("%d.%m.%Y")
        fname = f"–æ—Ç—á–µ—Ç –ø–æ –ø–æ–µ–∑–¥–∫–∞–º {today}.xlsx"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await update.message.reply_document(document=output, filename=fname)
    await update.message.reply_text("üìÑ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", parse_mode="Markdown")
